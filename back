#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

void token(char *s1);
void b_Sort(char *word[], int len);
int stop(char* s1);

/* void reduction(char *word[], int len){
	int flag = 1;
	for(int i=0; i<len; i++){
		if(word[i] != word[i+1]){
		}		
//		printf("[DUBUG] 패스가 잘되나~? %s\n", word[i]);		
	}
} */

typedef struct _Word{
	char* word;
	int p_num;
	int n_num;
}Word;

int main(int argc, char* argv[]){	
	char* po;
	char* ne;
	char* word_p;
	char* word_n;

	if(argc!=3){
                printf("Usage : %s <Positive_m> <Negative_m> \n", argv[0]);
                exit(1);
        }
	po = argv[1];
	ne = argv[2];
	printf("[DEBUG] positive_fname:%s negative_fname:%s \n", po,ne);

	FILE * fp = fopen(po,"r");
	FILE * write = fopen("po_out", "w");
	int n = 0;
	int index = 0;
	char buf[128];
	int len=0;
//	char** word = malloc(sizeof(char*) * 4096);
	char* word[4096];
	while(!feof(fp)){
		fscanf(fp,"%s", buf);
		token(buf);	 // Tokenization
		word[n] = buf;
//		printf("[DEBUG]word%d: %s\n", n+1, word[n]);
		printf("%s\n", word[n]);
		fprintf(write, "%s", word[n]);
		fprintf(write, "\n");
		n++;	
	}
	fclose(write);
	fclose(fp);
	printf("[DEBUG]N: %d\n", n); 

	FILE * fin = popen("./stemmer < po_out","r");      // Nomalization

	while(!feof(fin)){
                fscanf(fin,"%s", buf);                
		len = strlen(buf) + 1;
		word[index] = (char*)malloc(sizeof(char) * len);
			// 나중에 free넣을 것
		if(stop(buf)){				// Stopwrod, vocabulary 1
			strcpy(word[index], buf);
//			printf("[DEBUG]After Stemmer word[%d]: %s\n", index, word[index]);
			index+=1;
		}
		else{
			continue;
		}	
//		strcpy(word[index], buf);
//		index++;
        }

	printf("[DEBUG]index: %d\n", index);
	b_Sort(word, index);

	for(int i=0; i<index; i++){		
                printf("[DEBUG]After Sort: %s\n", word[i]);
	}

	printf("[DEBUG]index: %d\n", index);

//	reduction(word, index);


//	FILE * fp = fopen("po", "r");

	return 0;
}

void token(char *s1){;
	while(*s1!='\0'){
	        if(*s1>=97 && *s1<=122){
        	    s1++;
        	}
        	else if(*s1>=65 && *s1<=90){
        	   *s1+=32;
        	    s1++;
        	}
        	else{
	            strcpy(s1, s1+1);
        	 }
  }
}

void b_Sort(char *word[], int len){

   char temp[128];

    for(int i = len-1; i >0; i--){
        for(int t = 0; t < i; t++){
            int check = strcmp(word[t],word[t+1]); 
            if(check>0){ 
                strcpy(temp, word[t]); 
                strcpy(word[t],word[t+1]);
                strcpy(word[t+1],temp); 
            }
        }
    }
}

int stop(char* s1){
	int n;	
	if(!strcmp(s1, "a")) return 0;
	if(!strcmp(s1, "an")) return 0;
	if(!strcmp(s1, "the")) return 0;
	if(!strcmp(s1, "you")) return 0;
	if(!strcmp(s1, "i")) return 0;
	if(!strcmp(s1, "my")) return 0;
	if(!strcmp(s1, "me")) return 0;
	if(!strcmp(s1, "in")) return 0;
	if(!strcmp(s1, "it")) return 0;
	if(!strcmp(s1, "to")) return 0;
	if(!strcmp(s1, "your")) return 0;
	if(!strcmp(s1, "to")) return 0;
	if(!strcmp(s1, "on")) return 0;
	if(!strcmp(s1, "by")) return 0;
	if(!strcmp(s1, "of")) return 0;
	if(!strcmp(s1, "and")) return 0;
	if(!strcmp(s1, "about")) return 0;
	if(!strcmp(s1, "they")) return 0;
	if(!strcmp(s1, "that")) return 0;
	if(!strcmp(s1, "was")) return 0;
	if(!strcmp(s1, "are")) return 0;
	if(!strcmp(s1, "mine")) return 0;
	if(!strcmp(s1, "am")) return 0;
	if(!strcmp(s1, "is")) return 0;
	if(!strcmp(s1, "he")) return 0;
	if(!strcmp(s1, "his")) return 0;
	if(!strcmp(s1, "she")) return 0;
	if(!strcmp(s1, "her")) return 0;
	if(!strcmp(s1, "for")) return 0;
	if(!strcmp(s1, "would")) return 0;
	if(!strcmp(s1, "off")) return 0;
	if(!strcmp(s1, "at")) return 0;
	if(!strcmp(s1, "us")) return 0;
	if(!strcmp(s1, "were")) return 0;
	if(!strcmp(s1, "been")) return 0;
	if(!strcmp(s1, "we")) return 0;
	if(!strcmp(s1, "when")) return 0;
	if(!strcmp(s1, "what")) return 0;
	if(!strcmp(s1, "who")) return 0;
	if(!strcmp(s1, "where")) return 0;
	if(!strcmp(s1, "all")) return 0;
	if(!strcmp(s1, "be")) return 0;
	if(!strcmp(s1, "do")) return 0;
	if(!strcmp(s1, "if")) return 0;
	if(!strcmp(s1, "from")) return 0;
	if(!strcmp(s1, "or")) return 0;
	if(!strcmp(s1, "how")) return 0;
	if(!strcmp(s1, "will")) return 0;
	if(!strcmp(s1, "have")) return 0;
	if(!strcmp(s1, "has")) return 0;
	if(!strcmp(s1, "had")) return 0;
	if(!strcmp(s1, "did")) return 0;
	if(!strcmp(s1, "didnt")) return 0;
	if(!strcmp(s1, "dont")) return 0;
	if(!strcmp(s1, "doesnt")) return 0;
	if(!strcmp(s1, "but")) return 0;
	if(!strcmp(s1, "just")) return 0;
	if(!strcmp(s1, "our")) return 0;
	if(!strcmp(s1, "this")) return 0;

// --------------------------

	if(!strcmp(s1, "dm")) return 0;
	if(!strcmp(s1, "twitter")) return 0;
	if(!strncmp(s1, "http", 3)) return 0;

	return 1;
}

